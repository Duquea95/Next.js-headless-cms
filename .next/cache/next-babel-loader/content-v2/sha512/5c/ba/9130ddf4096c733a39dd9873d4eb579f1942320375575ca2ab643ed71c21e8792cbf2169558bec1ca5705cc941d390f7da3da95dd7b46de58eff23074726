{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/anthony/Documents/storefront-api-examples/swift_headless_cms/pages/product.js\";\nimport gql from 'graphql-tag';\nimport { useEffect } from 'react';\nimport Layout from '../components/Layout';\nimport Product from '../components/Product';\nimport Cart from '../components/Cart';\nimport CustomerAuthWithMutation from '../components/CustomerAuth'; // import gql from 'graphql-tag';\n\nimport { useCheckoutEffect, createCheckout, checkoutLineItemsAdd, checkoutLineItemsUpdate, checkoutLineItemsRemove, checkoutCustomerAssociate } from './checkout';\nconst query = gql`\n  query query {\n    shop {\n      name\n      description\n      products(first:20) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            title\n            options {\n              id\n              name\n              values\n            }\n            variants(first: 250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  id\n                  title\n                  selectedOptions {\n                    name\n                    value\n                  }\n                  image {\n                    src\n                  }\n                  price\n                }\n              }\n            }\n            images(first: 250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ProductPage(props) {\n  const [isCartOpen, setCartOpen] = useState(false);\n  const [isNewCustomer, setNewCustomer] = useState(false);\n  const [isCustomerAuthOpen, setCustomerAuthOpen] = useState(false);\n  const [showAccountVerificationMessage, setAccountVerificationMessage] = useState(false);\n  const [checkout, setCheckout] = useState({\n    lineItems: {\n      edges: []\n    }\n  });\n  const [customerAccessToken, setCustomerAccessToken] = useState(null);\n  const [createCheckoutMutation, {\n    data: createCheckoutData,\n    loading: createCheckoutLoading,\n    error: createCheckoutError\n  }] = useMutation(createCheckout);\n  const [lineItemAddMutation, {\n    data: lineItemAddData,\n    loading: lineItemAddLoading,\n    error: lineItemAddError\n  }] = useMutation(checkoutLineItemsAdd);\n  const [lineItemUpdateMutation, {\n    data: lineItemUpdateData,\n    loading: lineItemUpdateLoading,\n    error: lineItemUpdateError\n  }] = useMutation(checkoutLineItemsUpdate);\n  const [lineItemRemoveMutation, {\n    data: lineItemRemoveData,\n    loading: lineItemRemoveLoading,\n    error: lineItemRemoveError\n  }] = useMutation(checkoutLineItemsRemove);\n  const [customerAssociateMutation, {\n    data: customerAssociateData,\n    loading: customerAssociateLoading,\n    error: customerAssociateError\n  }] = useMutation(checkoutCustomerAssociate);\n  const {\n    loading: shopLoading,\n    error: shopError,\n    data: shopData\n  } = useQuery(query);\n  useEffect(() => {\n    const variables = {\n      input: {}\n    };\n    createCheckoutMutation({\n      variables\n    }).then(res => {\n      console.log(res);\n    }, err => {\n      console.log('create checkout error', err);\n    });\n  }, []);\n  useCheckoutEffect(createCheckoutData, 'checkoutCreate', setCheckout);\n  useCheckoutEffect(lineItemAddData, 'checkoutLineItemsAdd', setCheckout);\n  useCheckoutEffect(lineItemUpdateData, 'checkoutLineItemsUpdate', setCheckout);\n  useCheckoutEffect(lineItemRemoveData, 'checkoutLineItemsRemove', setCheckout);\n  useCheckoutEffect(customerAssociateData, 'checkoutCustomerAssociate', setCheckout);\n\n  const handleCartClose = () => {\n    setCartOpen(false);\n  };\n\n  const openCustomerAuth = event => {\n    if (event.target.getAttribute('data-customer-type') === \"new-customer\") {\n      setNewCustomer(true);\n      setCustomerAuthOpen(true);\n    } else {\n      setNewCustomer(false);\n      setCustomerAuthOpen(true);\n    }\n  };\n\n  const accountVerificationMessage = () => {\n    setAccountVerificationMessage(true);\n    setTimeout(() => {\n      setAccountVerificationMessage(false);\n    }, 5000);\n  };\n\n  const closeCustomerAuth = () => {\n    setCustomerAuthOpen(false);\n  };\n\n  const addVariantToCart = (variantId, quantity) => {\n    const variables = {\n      checkoutId: checkout.id,\n      lineItems: [{\n        variantId,\n        quantity: parseInt(quantity, 10)\n      }]\n    }; // TODO replace for each mutation in the checkout thingy. can we export them from there???\n    // create your own custom hook???\n\n    lineItemAddMutation({\n      variables\n    }).then(res => {\n      setCartOpen(true);\n    });\n  };\n\n  const updateLineItemInCart = (lineItemId, quantity) => {\n    const variables = {\n      checkoutId: checkout.id,\n      lineItems: [{\n        id: lineItemId,\n        quantity: parseInt(quantity, 10)\n      }]\n    };\n    lineItemUpdateMutation({\n      variables\n    });\n  };\n\n  const removeLineItemInCart = lineItemId => {\n    const variables = {\n      checkoutId: checkout.id,\n      lineItemIds: [lineItemId]\n    };\n    lineItemRemoveMutation({\n      variables\n    });\n  };\n\n  const associateCustomerCheckout = customerAccessToken => {\n    const variables = {\n      checkoutId: checkout.id,\n      customerAccessToken: customerAccessToken\n    };\n    customerAssociateMutation({\n      variables\n    }).then(res => {\n      setCustomerAuthOpen(false);\n    });\n  };\n\n  if (shopLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (shopError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: shopError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Product-wrapper\",\n      children: shopData.shop.products.edges.map(product => /*#__PURE__*/_jsxDEV(Product, {\n        addVariantToCart: addVariantToCart,\n        checkout: checkout,\n        product: product.node\n      }, product.node.id.toString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 9\n  }, this);\n}\n\nexport default ProductPage;","map":{"version":3,"sources":["/Users/anthony/Documents/storefront-api-examples/swift_headless_cms/pages/product.js"],"names":["gql","useEffect","Layout","Product","Cart","CustomerAuthWithMutation","useCheckoutEffect","createCheckout","checkoutLineItemsAdd","checkoutLineItemsUpdate","checkoutLineItemsRemove","checkoutCustomerAssociate","query","ProductPage","props","isCartOpen","setCartOpen","useState","isNewCustomer","setNewCustomer","isCustomerAuthOpen","setCustomerAuthOpen","showAccountVerificationMessage","setAccountVerificationMessage","checkout","setCheckout","lineItems","edges","customerAccessToken","setCustomerAccessToken","createCheckoutMutation","data","createCheckoutData","loading","createCheckoutLoading","error","createCheckoutError","useMutation","lineItemAddMutation","lineItemAddData","lineItemAddLoading","lineItemAddError","lineItemUpdateMutation","lineItemUpdateData","lineItemUpdateLoading","lineItemUpdateError","lineItemRemoveMutation","lineItemRemoveData","lineItemRemoveLoading","lineItemRemoveError","customerAssociateMutation","customerAssociateData","customerAssociateLoading","customerAssociateError","shopLoading","shopError","shopData","useQuery","variables","input","then","res","console","log","err","handleCartClose","openCustomerAuth","event","target","getAttribute","accountVerificationMessage","setTimeout","closeCustomerAuth","addVariantToCart","variantId","quantity","checkoutId","id","parseInt","updateLineItemInCart","lineItemId","removeLineItemInCart","lineItemIds","associateCustomerCheckout","message","shop","products","map","product","node","toString"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,wBAAP,MAAqC,4BAArC,C,CACA;;AACA,SACEC,iBADF,EAEEC,cAFF,EAGEC,oBAHF,EAIEC,uBAJF,EAKEC,uBALF,EAMEC,yBANF,QAOO,YAPP;AASA,MAAMC,KAAK,GAAGZ,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAvDA;;AAyDA,SAASa,WAAT,CAAqBC,KAArB,EAA2B;AACvB,QAAM,CAACC,UAAD,EAAYC,WAAZ,IAA2BC,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACC,aAAD,EAAeC,cAAf,IAAiCF,QAAQ,CAAC,KAAD,CAA/C;AACA,QAAM,CAACG,kBAAD,EAAoBC,mBAApB,IAA2CJ,QAAQ,CAAC,KAAD,CAAzD;AACA,QAAM,CAACK,8BAAD,EAAgCC,6BAAhC,IAAiEN,QAAQ,CAAC,KAAD,CAA/E;AACA,QAAM,CAACO,QAAD,EAAUC,WAAV,IAAyBR,QAAQ,CAAC;AAAES,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAAb,GAAD,CAAvC;AAEA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDZ,QAAQ,CAAC,IAAD,CAA9D;AAEA,QAAM,CAACa,sBAAD,EACN;AACIC,IAAAA,IAAI,EAAEC,kBADV;AAEIC,IAAAA,OAAO,EAAEC,qBAFb;AAGIC,IAAAA,KAAK,EAAEC;AAHX,GADM,IAKDC,WAAW,CAAC9B,cAAD,CALhB;AAOA,QAAM,CAAC+B,mBAAD,EACN;AACIP,IAAAA,IAAI,EAAEQ,eADV;AAEIN,IAAAA,OAAO,EAAEO,kBAFb;AAGIL,IAAAA,KAAK,EAAEM;AAHX,GADM,IAKDJ,WAAW,CAAC7B,oBAAD,CALhB;AAOA,QAAM,CAACkC,sBAAD,EACN;AACIX,IAAAA,IAAI,EAAEY,kBADV;AAEIV,IAAAA,OAAO,EAAEW,qBAFb;AAGIT,IAAAA,KAAK,EAAEU;AAHX,GADM,IAKDR,WAAW,CAAC5B,uBAAD,CALhB;AAOA,QAAM,CAACqC,sBAAD,EACN;AACIf,IAAAA,IAAI,EAAEgB,kBADV;AAEId,IAAAA,OAAO,EAAEe,qBAFb;AAGIb,IAAAA,KAAK,EAAEc;AAHX,GADM,IAKDZ,WAAW,CAAC3B,uBAAD,CALhB;AAOA,QAAM,CAACwC,yBAAD,EACN;AACInB,IAAAA,IAAI,EAAEoB,qBADV;AAEIlB,IAAAA,OAAO,EAAEmB,wBAFb;AAGIjB,IAAAA,KAAK,EAAEkB;AAHX,GADM,IAKDhB,WAAW,CAAC1B,yBAAD,CALhB;AAOA,QAAM;AAAEsB,IAAAA,OAAO,EAACqB,WAAV;AAAuBnB,IAAAA,KAAK,EAACoB,SAA7B;AAAwCxB,IAAAA,IAAI,EAACyB;AAA7C,MAA0DC,QAAQ,CAAC7C,KAAD,CAAxE;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMyD,SAAS,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAlB;AACA7B,IAAAA,sBAAsB,CAAC;AAAE4B,MAAAA;AAAF,KAAD,CAAtB,CAAsCE,IAAtC,CACAC,GAAG,IAAI;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAaF,GAAb;AACH,KAHD,EAIAG,GAAG,IAAI;AACHF,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCC,GAArC;AACH,KAND;AASH,GAXQ,EAWN,EAXM,CAAT;AAaA1D,EAAAA,iBAAiB,CAAC0B,kBAAD,EAAqB,gBAArB,EAAuCP,WAAvC,CAAjB;AACAnB,EAAAA,iBAAiB,CAACiC,eAAD,EAAkB,sBAAlB,EAA0Cd,WAA1C,CAAjB;AACAnB,EAAAA,iBAAiB,CAACqC,kBAAD,EAAqB,yBAArB,EAAgDlB,WAAhD,CAAjB;AACAnB,EAAAA,iBAAiB,CAACyC,kBAAD,EAAqB,yBAArB,EAAgDtB,WAAhD,CAAjB;AACAnB,EAAAA,iBAAiB,CAAC6C,qBAAD,EAAwB,2BAAxB,EAAqD1B,WAArD,CAAjB;;AAEA,QAAMwC,eAAe,GAAG,MAAM;AAC1BjD,IAAAA,WAAW,CAAE,KAAF,CAAX;AACH,GAFD;;AAIA,QAAMkD,gBAAgB,GAAIC,KAAD,IAAW;AAChC,QAAIA,KAAK,CAACC,MAAN,CAAaC,YAAb,CAA0B,oBAA1B,MAAoD,cAAxD,EAAwE;AACxElD,MAAAA,cAAc,CAAE,IAAF,CAAd;AACAE,MAAAA,mBAAmB,CAAE,IAAF,CAAnB;AACC,KAHD,MAGO;AACPF,MAAAA,cAAc,CAAE,KAAF,CAAd;AACAE,MAAAA,mBAAmB,CAAE,IAAF,CAAnB;AACC;AACJ,GARD;;AAUA,QAAMiD,0BAA0B,GAAG,MAAM;AACrC/C,IAAAA,6BAA6B,CAAC,IAAD,CAA7B;AACAgD,IAAAA,UAAU,CAAC,MAAM;AACjBhD,MAAAA,6BAA6B,CAAC,KAAD,CAA7B;AACH,KAFa,EAEX,IAFW,CAAV;AAGH,GALD;;AAOA,QAAMiD,iBAAiB,GAAG,MAAM;AAC5BnD,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH,GAFD;;AAIA,QAAMoD,gBAAgB,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAwB;AAC7C,UAAMjB,SAAS,GAAG;AAAEkB,MAAAA,UAAU,EAACpD,QAAQ,CAACqD,EAAtB;AAA0BnD,MAAAA,SAAS,EAAG,CAAC;AAACgD,QAAAA,SAAD;AAAYC,QAAAA,QAAQ,EAAEG,QAAQ,CAACH,QAAD,EAAW,EAAX;AAA9B,OAAD;AAAtC,KAAlB,CAD6C,CAE7C;AACA;;AAEArC,IAAAA,mBAAmB,CAAC;AAAEoB,MAAAA;AAAF,KAAD,CAAnB,CAAmCE,IAAnC,CAAwCC,GAAG,IAAI;AAC3C7C,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KAFD;AAGH,GARD;;AAUA,QAAM+D,oBAAoB,GAAG,CAACC,UAAD,EAAaL,QAAb,KAA0B;AACnD,UAAMjB,SAAS,GAAG;AAAEkB,MAAAA,UAAU,EAACpD,QAAQ,CAACqD,EAAtB;AAA0BnD,MAAAA,SAAS,EAAE,CAAC;AAACmD,QAAAA,EAAE,EAAEG,UAAL;AAAiBL,QAAAA,QAAQ,EAAEG,QAAQ,CAACH,QAAD,EAAW,EAAX;AAAnC,OAAD;AAArC,KAAlB;AACAjC,IAAAA,sBAAsB,CAAC;AAAEgB,MAAAA;AAAF,KAAD,CAAtB;AACH,GAHD;;AAKA,QAAMuB,oBAAoB,GAAID,UAAD,IAAgB;AACzC,UAAMtB,SAAS,GAAG;AAAEkB,MAAAA,UAAU,EAACpD,QAAQ,CAACqD,EAAtB;AAA0BK,MAAAA,WAAW,EAAE,CAACF,UAAD;AAAvC,KAAlB;AACAlC,IAAAA,sBAAsB,CAAC;AAAEY,MAAAA;AAAF,KAAD,CAAtB;AACH,GAHD;;AAKA,QAAMyB,yBAAyB,GAAIvD,mBAAD,IAAyB;AAEvD,UAAM8B,SAAS,GAAG;AAAEkB,MAAAA,UAAU,EAACpD,QAAQ,CAACqD,EAAtB;AAA0BjD,MAAAA,mBAAmB,EAAEA;AAA/C,KAAlB;AACAsB,IAAAA,yBAAyB,CAAC;AAAEQ,MAAAA;AAAF,KAAD,CAAzB,CAAyCE,IAAzC,CAA+CC,GAAD,IAAS;AACvDxC,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACC,KAFD;AAGH,GAND;;AAQA,MAAIiC,WAAJ,EAAiB;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAIC,SAAJ,EAAe;AACX,wBAAO;AAAA,gBAAIA,SAAS,CAAC6B;AAAd;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACI,QAAC,MAAD;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACM5B,QAAQ,CAAC6B,IAAT,CAAcC,QAAd,CAAuB3D,KAAvB,CAA6B4D,GAA7B,CAAiCC,OAAO,iBACtC,QAAC,OAAD;AAAS,QAAA,gBAAgB,EAAEf,gBAA3B;AAA6C,QAAA,QAAQ,EAAEjD,QAAvD;AAAkG,QAAA,OAAO,EAAEgE,OAAO,CAACC;AAAnH,SAAsED,OAAO,CAACC,IAAR,CAAaZ,EAAb,CAAgBa,QAAhB,EAAtE;AAAA;AAAA;AAAA;AAAA,cADF;AADN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;AAED,eAAe7E,WAAf","sourcesContent":["import gql from 'graphql-tag';\nimport { useEffect } from 'react';\nimport Layout from '../components/Layout';\nimport Product from '../components/Product';\nimport Cart from '../components/Cart';\nimport CustomerAuthWithMutation from '../components/CustomerAuth';\n// import gql from 'graphql-tag';\nimport {\n  useCheckoutEffect,\n  createCheckout,\n  checkoutLineItemsAdd,\n  checkoutLineItemsUpdate,\n  checkoutLineItemsRemove,\n  checkoutCustomerAssociate,\n} from './checkout';\n\nconst query = gql`\n  query query {\n    shop {\n      name\n      description\n      products(first:20) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            title\n            options {\n              id\n              name\n              values\n            }\n            variants(first: 250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  id\n                  title\n                  selectedOptions {\n                    name\n                    value\n                  }\n                  image {\n                    src\n                  }\n                  price\n                }\n              }\n            }\n            images(first: 250) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n              }\n              edges {\n                node {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ProductPage(props){\n    const [isCartOpen,setCartOpen] = useState(false);\n    const [isNewCustomer,setNewCustomer] = useState(false);\n    const [isCustomerAuthOpen,setCustomerAuthOpen] = useState(false);\n    const [showAccountVerificationMessage,setAccountVerificationMessage] = useState(false);\n    const [checkout,setCheckout] = useState({ lineItems: { edges: [] }});\n\n    const [customerAccessToken, setCustomerAccessToken] = useState(null);\n\n    const [createCheckoutMutation,\n    {\n        data: createCheckoutData,\n        loading: createCheckoutLoading,\n        error: createCheckoutError\n    }] = useMutation(createCheckout);\n\n    const [lineItemAddMutation,\n    {\n        data: lineItemAddData,\n        loading: lineItemAddLoading,\n        error: lineItemAddError\n    }] = useMutation(checkoutLineItemsAdd);\n\n    const [lineItemUpdateMutation,\n    {\n        data: lineItemUpdateData,\n        loading: lineItemUpdateLoading,\n        error: lineItemUpdateError\n    }] = useMutation(checkoutLineItemsUpdate);\n\n    const [lineItemRemoveMutation,\n    {\n        data: lineItemRemoveData,\n        loading: lineItemRemoveLoading,\n        error: lineItemRemoveError\n    }] = useMutation(checkoutLineItemsRemove);\n\n    const [customerAssociateMutation,\n    {\n        data: customerAssociateData,\n        loading: customerAssociateLoading,\n        error: customerAssociateError\n    }] = useMutation(checkoutCustomerAssociate);\n\n    const { loading:shopLoading, error:shopError, data:shopData } = useQuery(query);\n\n    useEffect(() => {\n        const variables = { input: {} };\n        createCheckoutMutation({ variables }).then(\n        res => {\n            console.log( res );\n        },\n        err => {\n            console.log('create checkout error', err );\n        }\n        );\n\n    }, []);\n\n    useCheckoutEffect(createCheckoutData, 'checkoutCreate', setCheckout);\n    useCheckoutEffect(lineItemAddData, 'checkoutLineItemsAdd', setCheckout);\n    useCheckoutEffect(lineItemUpdateData, 'checkoutLineItemsUpdate', setCheckout);\n    useCheckoutEffect(lineItemRemoveData, 'checkoutLineItemsRemove', setCheckout);\n    useCheckoutEffect(customerAssociateData, 'checkoutCustomerAssociate', setCheckout);\n\n    const handleCartClose = () => {\n        setCartOpen( false );\n    };\n\n    const openCustomerAuth = (event) => {\n        if (event.target.getAttribute('data-customer-type') === \"new-customer\") {\n        setNewCustomer( true );\n        setCustomerAuthOpen( true );\n        } else {\n        setNewCustomer( false );\n        setCustomerAuthOpen( true );\n        }\n    };\n\n    const accountVerificationMessage = () => {\n        setAccountVerificationMessage(true)\n        setTimeout(() => {\n        setAccountVerificationMessage(false)\n    }, 5000);\n    };\n\n    const closeCustomerAuth = () => {\n        setCustomerAuthOpen(false);\n    };\n\n    const addVariantToCart = (variantId, quantity) =>{\n        const variables = { checkoutId:checkout.id, lineItems:  [{variantId, quantity: parseInt(quantity, 10)}] };\n        // TODO replace for each mutation in the checkout thingy. can we export them from there???\n        // create your own custom hook???\n\n        lineItemAddMutation({ variables }).then(res => {\n            setCartOpen(true);\n        });\n    };\n\n    const updateLineItemInCart = (lineItemId, quantity) => {\n        const variables = { checkoutId:checkout.id, lineItems: [{id: lineItemId, quantity: parseInt(quantity, 10)}] };\n        lineItemUpdateMutation({ variables });\n    };\n\n    const removeLineItemInCart = (lineItemId) => {\n        const variables = { checkoutId:checkout.id, lineItemIds: [lineItemId] };\n        lineItemRemoveMutation({ variables });\n    };\n\n    const associateCustomerCheckout = (customerAccessToken) => {\n\n        const variables = { checkoutId:checkout.id, customerAccessToken: customerAccessToken };\n        customerAssociateMutation({ variables }).then((res) => {\n        setCustomerAuthOpen(false);\n        });\n    };\n\n    if (shopLoading) {\n        return <p>Loading ...</p>;\n    }\n\n    if (shopError) {\n        return <p>{shopError.message}</p>;\n    }\n    return(\n        <Layout>\n            <div className=\"Product-wrapper\">\n                { shopData.shop.products.edges.map(product =>\n                    <Product addVariantToCart={addVariantToCart} checkout={checkout} key={product.node.id.toString()} product={product.node} />\n                )}\n            </div>\n        </Layout>\n    )\n}\n\nexport default ProductPage"]},"metadata":{},"sourceType":"module"}