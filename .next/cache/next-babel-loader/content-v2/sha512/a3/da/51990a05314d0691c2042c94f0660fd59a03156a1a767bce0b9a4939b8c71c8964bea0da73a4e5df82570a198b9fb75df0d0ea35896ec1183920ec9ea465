{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/anthony/Documents/storefront-api-examples/swift_headless_cms/components/CustomerAuth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { graphql } from 'react-apollo';\nimport { flowRight as compose } from 'lodash';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\n\nfunction CustomerAuth(props) {\n  _s();\n\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: nonFieldErrorMessage,\n    1: setNonFieldErrorMessage\n  } = useState(null);\n  const {\n    0: emailErrorMessage,\n    1: setEmailErrorMessage\n  } = useState(null);\n  const {\n    0: passwordErrorMessage,\n    1: setPasswordErrorMessage\n  } = useState(null);\n\n  const resetInputFields = () => {\n    setPassword('');\n    setEmail('');\n  };\n\n  const resetErrorMessages = () => {\n    setNonFieldErrorMessage(null);\n    setEmailErrorMessage(null);\n    setPasswordErrorMessage(null);\n  };\n\n  const handleSubmit = () => {\n    resetErrorMessages();\n\n    if (props.newCustomer) {\n      createCustomerAccount(email, password);\n    } else {\n      loginCustomerAccount(email, password);\n    }\n  };\n\n  const createCustomerAccount = (email, password) => {\n    const input = {\n      email: email,\n      password: password\n    };\n    props.customerCreate({\n      variables: {\n        input\n      }\n    }).then(res => {\n      if (res.data.customerCreate.customer) {\n        props.closeCustomerAuth();\n        props.showAccountVerificationMessage();\n      } else {\n        res.data.customerCreate.userErrors.forEach(function (error) {\n          if (error.field && error.field === 'email') {\n            setEmailErrorMessage(error.message);\n          } else if (error.field && error.field === 'password') {\n            setPasswordErrorMessage(error.message);\n          } else {\n            setNonFieldErrorMessage(error.message);\n          }\n        });\n      }\n    });\n  };\n\n  const loginCustomerAccount = (email, password) => {\n    const input = {\n      email: email,\n      password: password\n    };\n    props.customerAccessTokenCreate({\n      variables: {\n        input\n      }\n    }).then(res => {\n      if (res.data.customerAccessTokenCreate.customerAccessToken) {\n        props.associateCustomerCheckout(res.data.customerAccessTokenCreate.customerAccessToken.accessToken);\n      } else {\n        res.data.customerAccessTokenCreate.userErrors.forEach(function (error) {\n          if (error.field && error.field === 'email') {\n            setEmailErrorMessage(error.message);\n          } else if (error.field && error.field === 'password') {\n            setPasswordErrorMessage(error.message);\n          } else {\n            setNonFieldErrorMessage(error.message);\n          }\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `CustomerAuth ${props.isCustomerAuthOpen ? 'CustomerAuth--open' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        props.closeCustomerAuth();\n        resetErrorMessages();\n        resetInputFields();\n      },\n      className: \"CustomerAuth__close\",\n      children: \"\\xD7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CustomerAuth__body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"CustomerAuth__heading\",\n        children: props.newCustomer ? 'Create your Account' : 'Log in to your account'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), nonFieldErrorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: nonFieldErrorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"CustomerAuth__credential\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"CustomerAuth__input\",\n          type: \"email\",\n          placeholder: \"Email\",\n          name: \"email\",\n          value: email,\n          onChange: event => {\n            setEmail(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), emailErrorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: emailErrorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"CustomerAuth__credential\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"CustomerAuth__input\",\n          type: \"password\",\n          placeholder: \"Password\",\n          name: \"password\",\n          value: password,\n          onChange: event => setPassword(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), passwordErrorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: passwordErrorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"CustomerAuth__submit button\",\n        type: \"submit\",\n        onClick: handleSubmit,\n        children: props.newCustomer ? 'Create Account' : 'Log in'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomerAuth, \"77mrdiVcOloIjuM56WNUvG7ctzA=\");\n\n_c = CustomerAuth;\nCustomerAuth.propTypes = {\n  customerCreate: PropTypes.func.isRequired,\n  customerAccessTokenCreate: PropTypes.func.isRequired\n};\nconst customerCreate = gql`\n  mutation customerCreate($input: CustomerCreateInput!) {\n    customerCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n      }\n    }\n  }\n`;\nconst customerAccessTokenCreate = gql`\n  mutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\nconst CustomerAuthWithMutation = compose(graphql(customerCreate, {\n  name: \"customerCreate\"\n}), graphql(customerAccessTokenCreate, {\n  name: \"customerAccessTokenCreate\"\n}))(CustomerAuth);\nexport default CustomerAuthWithMutation;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomerAuth\");","map":{"version":3,"sources":["/Users/anthony/Documents/storefront-api-examples/swift_headless_cms/components/CustomerAuth.js"],"names":["React","useState","graphql","flowRight","compose","gql","PropTypes","CustomerAuth","props","email","setEmail","password","setPassword","nonFieldErrorMessage","setNonFieldErrorMessage","emailErrorMessage","setEmailErrorMessage","passwordErrorMessage","setPasswordErrorMessage","resetInputFields","resetErrorMessages","handleSubmit","newCustomer","createCustomerAccount","loginCustomerAccount","input","customerCreate","variables","then","res","data","customer","closeCustomerAuth","showAccountVerificationMessage","userErrors","forEach","error","field","message","customerAccessTokenCreate","customerAccessToken","associateCustomerCheckout","accessToken","isCustomerAuthOpen","event","target","value","propTypes","func","isRequired","CustomerAuthWithMutation","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { graphql } from 'react-apollo';\nimport {flowRight as compose} from 'lodash';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\n\nfunction CustomerAuth(props){\n\n  const [email,setEmail] = useState('');\n  const [password,setPassword] = useState('');\n  const [nonFieldErrorMessage,setNonFieldErrorMessage] = useState(null);\n  const [emailErrorMessage, setEmailErrorMessage] = useState(null);\n  const [passwordErrorMessage, setPasswordErrorMessage] = useState(null);\n\n  const resetInputFields = () => {\n    setPassword('');\n    setEmail('');\n  };\n\n  const resetErrorMessages = () => {\n    setNonFieldErrorMessage( null );\n    setEmailErrorMessage( null );\n    setPasswordErrorMessage( null );\n  };\n\n  const handleSubmit = () => {\n    resetErrorMessages();\n    if (props.newCustomer) {\n      createCustomerAccount(email, password)\n    } else {\n      loginCustomerAccount(email, password)\n    }\n  };\n\n  const createCustomerAccount = (email, password) => {\n    const input = {\n      email: email,\n      password: password\n    }\n    props.customerCreate(\n      { variables: { input }\n      }).then((res) => {\n        if (res.data.customerCreate.customer){\n           props.closeCustomerAuth();\n           props.showAccountVerificationMessage();\n        } else {\n          res.data.customerCreate.userErrors.forEach(function (error) {\n            if (error.field && error.field === 'email') {\n              setEmailErrorMessage( error.message );\n            } else if (error.field && error.field === 'password') {\n              setPasswordErrorMessage( error.message );\n            } else {\n              setNonFieldErrorMessage( error.message );\n            }\n          });\n        }\n    });\n  }\n\n  const loginCustomerAccount = (email, password) => {\n    const input = {\n      email: email,\n      password: password\n    }\n    props.customerAccessTokenCreate(\n      { variables: { input }\n      }).then((res) => {\n      if (res.data.customerAccessTokenCreate.customerAccessToken) {\n        props.associateCustomerCheckout(res.data.customerAccessTokenCreate.customerAccessToken.accessToken);\n      } else {\n        res.data.customerAccessTokenCreate.userErrors.forEach(function (error) {\n          if (error.field && error.field === 'email') {\n            setEmailErrorMessage( error.message );\n          } else if (error.field && error.field === 'password') {\n            setPasswordErrorMessage( error.message );\n          } else {\n            setNonFieldErrorMessage( error.message );\n          }\n        });\n      }\n    });\n  }\n\n  return (\n    <div className={`CustomerAuth ${props.isCustomerAuthOpen ? 'CustomerAuth--open' : ''}`}>\n      <button\n        onClick={() => { props.closeCustomerAuth(); resetErrorMessages(); resetInputFields();}}\n        className=\"CustomerAuth__close\">\n        ×\n      </button>\n      <div className=\"CustomerAuth__body\">\n        <h2 className=\"CustomerAuth__heading\">{props.newCustomer ? 'Create your Account' : 'Log in to your account'}</h2>\n        {nonFieldErrorMessage &&\n          <div className=\"error\">{nonFieldErrorMessage}</div>\n        }\n        <label className=\"CustomerAuth__credential\">\n          <input className=\"CustomerAuth__input\" type=\"email\" placeholder=\"Email\" name={\"email\"} value={email} onChange={(event)=>{setEmail(event.target.value)}}></input>\n          {emailErrorMessage &&\n            <div className=\"error\">{emailErrorMessage}</div>\n          }\n        </label>\n        <label className=\"CustomerAuth__credential\">\n          <input className=\"CustomerAuth__input\" type=\"password\" placeholder=\"Password\" name={\"password\"} value={password} onChange={(event)=>setPassword(event.target.value)}></input>\n          {passwordErrorMessage &&\n            <div className=\"error\">{passwordErrorMessage}</div>\n          }\n        </label>\n        <button className=\"CustomerAuth__submit button\" type=\"submit\" onClick={handleSubmit}>{props.newCustomer ? 'Create Account' : 'Log in'}</button>\n      </div>\n    </div>\n\n  )\n}\n\nCustomerAuth.propTypes = {\n  customerCreate: PropTypes.func.isRequired,\n  customerAccessTokenCreate: PropTypes.func.isRequired,\n};\n\nconst customerCreate = gql`\n  mutation customerCreate($input: CustomerCreateInput!) {\n    customerCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customer {\n        id\n      }\n    }\n  }\n`;\n\nconst customerAccessTokenCreate = gql`\n  mutation customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n\nconst CustomerAuthWithMutation = compose(\n  graphql(customerCreate, {name: \"customerCreate\"}),\n  graphql(customerAccessTokenCreate, {name: \"customerAccessTokenCreate\"})\n)(CustomerAuth);\n\nexport default CustomerAuthWithMutation;\n"]},"metadata":{},"sourceType":"module"}